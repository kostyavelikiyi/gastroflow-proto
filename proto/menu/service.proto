syntax = "proto3";

package com.gastroflow.menu;

import "menu/models.proto";
import "common/types.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "github.com/gastroflow/proto-go/menu";

// MenuService - gRPC сервис для управления меню
service MenuService {
  // Создать новое меню
  rpc CreateMenu(CreateMenuRequest) returns (CreateMenuResponse);
  
  // Получить меню по ID
  rpc GetMenu(GetMenuRequest) returns (GetMenuResponse);
  
  // Обновить меню
  rpc UpdateMenu(UpdateMenuRequest) returns (UpdateMenuResponse);
  
  // Удалить меню (мягкое удаление)
  rpc DeleteMenu(DeleteMenuRequest) returns (google.protobuf.Empty);
  
  // Получить список меню ресторана
  rpc ListMenus(ListMenusRequest) returns (ListMenusResponse);
  
  // Получить активное меню ресторана
  rpc GetActiveMenu(GetActiveMenuRequest) returns (GetActiveMenuResponse);
}

// CategoryService - gRPC сервис для управления категориями
service CategoryService {
  // Создать новую категорию
  rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse);
  
  // Получить категорию по ID
  rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse);
  
  // Обновить категорию
  rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse);
  
  // Удалить категорию (мягкое удаление)
  rpc DeleteCategory(DeleteCategoryRequest) returns (google.protobuf.Empty);
  
  // Получить список категорий меню
  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  
  // Изменить порядок категорий
  rpc ReorderCategories(ReorderCategoriesRequest) returns (ReorderCategoriesResponse);
}

// MenuItemService - gRPC сервис для управления позициями меню
service MenuItemService {
  // Создать новую позицию меню
  rpc CreateMenuItem(CreateMenuItemRequest) returns (CreateMenuItemResponse);
  
  // Получить позицию меню по ID
  rpc GetMenuItem(GetMenuItemRequest) returns (GetMenuItemResponse);
  
  // Обновить позицию меню
  rpc UpdateMenuItem(UpdateMenuItemRequest) returns (UpdateMenuItemResponse);
  
  // Удалить позицию меню (мягкое удаление)
  rpc DeleteMenuItem(DeleteMenuItemRequest) returns (google.protobuf.Empty);
  
  // Получить список позиций категории
  rpc ListMenuItems(ListMenuItemsRequest) returns (ListMenuItemsResponse);
  
  // Поиск позиций меню
  rpc SearchMenuItems(SearchMenuItemsRequest) returns (SearchMenuItemsResponse);
  
  // Изменить статус позиции меню
  rpc UpdateMenuItemStatus(UpdateMenuItemStatusRequest) returns (UpdateMenuItemStatusResponse);
  
  // Изменить порядок позиций в категории
  rpc ReorderMenuItems(ReorderMenuItemsRequest) returns (ReorderMenuItemsResponse);
  
  // Получить популярные позиции
  rpc GetPopularMenuItems(GetPopularMenuItemsRequest) returns (GetPopularMenuItemsResponse);
}

// Запросы и ответы для MenuService

message CreateMenuRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 200
  }];
  string description = 2 [(validate.rules).string.max_len = 1000];
  com.gastroflow.common.UUID restaurant_id = 3 [(validate.rules).message.required = true];
  TimeSlot time_slot = 4;
  repeated com.gastroflow.common.WeekDay active_days = 5 [(validate.rules).repeated.max_items = 7];
  com.gastroflow.common.Language language = 6 [(validate.rules).enum = {
    not_in: [0]
  }];
}

message CreateMenuResponse {
  Menu menu = 1 [(validate.rules).message.required = true];
}

message GetMenuRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message GetMenuResponse {
  Menu menu = 1 [(validate.rules).message.required = true];
}

message UpdateMenuRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  Menu menu = 2 [(validate.rules).message.required = true];
}

message UpdateMenuResponse {
  Menu menu = 1 [(validate.rules).message.required = true];
}

message DeleteMenuRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message ListMenusRequest {
  com.gastroflow.common.UUID restaurant_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.PaginationRequest pagination = 2 [(validate.rules).message.required = true];
  bool active_only = 3;
  com.gastroflow.common.Language language = 4;
}

message ListMenusResponse {
  repeated Menu menus = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message GetActiveMenuRequest {
  com.gastroflow.common.UUID restaurant_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.Language language = 2;
}

message GetActiveMenuResponse {
  Menu menu = 1 [(validate.rules).message.required = true];
}

// Запросы и ответы для CategoryService

message CreateCategoryRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];
  string description = 2 [(validate.rules).string.max_len = 500];
  com.gastroflow.common.UUID menu_id = 3 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID parent_id = 4;
  string image_url = 5 [(validate.rules).string.max_len = 500];
  int32 sort_order = 6 [(validate.rules).int32.gte = 0];
}

message CreateCategoryResponse {
  Category category = 1 [(validate.rules).message.required = true];
}

message GetCategoryRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message GetCategoryResponse {
  Category category = 1 [(validate.rules).message.required = true];
}

message UpdateCategoryRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  Category category = 2 [(validate.rules).message.required = true];
}

message UpdateCategoryResponse {
  Category category = 1 [(validate.rules).message.required = true];
}

message DeleteCategoryRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message ListCategoriesRequest {
  com.gastroflow.common.UUID menu_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
  com.gastroflow.common.PaginationRequest pagination = 3 [(validate.rules).message.required = true];
  bool active_only = 4;
  com.gastroflow.common.UUID parent_id = 5;
}

message ListCategoriesResponse {
  repeated Category categories = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message ReorderCategoriesRequest {
  com.gastroflow.common.UUID menu_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
  repeated CategoryOrder category_orders = 3 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 100
  }];
}

message CategoryOrder {
  com.gastroflow.common.UUID category_id = 1 [(validate.rules).message.required = true];
  int32 sort_order = 2 [(validate.rules).int32.gte = 0];
}

message ReorderCategoriesResponse {
  repeated Category categories = 1;
}

// Запросы и ответы для MenuItemService

message CreateMenuItemRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 200
  }];
  string description = 2 [(validate.rules).string.max_len = 1000];
  com.gastroflow.common.Money price = 3 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID category_id = 4 [(validate.rules).message.required = true];
  int32 cooking_time = 5 [(validate.rules).int32 = {
    gte: 1,
    lte: 120
  }];
  NutritionInfo nutrition_info = 6;
  repeated Allergen allergens = 7 [(validate.rules).repeated.max_items = 50];
  string image_url = 8 [(validate.rules).string.max_len = 500];
  repeated string additional_images = 9 [(validate.rules).repeated = {
    max_items: 10,
    items: {string: {max_len: 500}}
  }];
  string portion_size = 10 [(validate.rules).string.max_len = 50];
  repeated DietaryProperty dietary_properties = 11 [(validate.rules).repeated.max_items = 20];
  repeated string ingredients = 12 [(validate.rules).repeated = {
    max_items: 100,
    items: {string: {max_len: 100}}
  }];
  repeated CreateMenuItemVariantRequest variants = 13 [(validate.rules).repeated.max_items = 100];
}

message CreateMenuItemVariantRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];
  com.gastroflow.common.Money price_modifier = 2 [(validate.rules).message.required = true];
  VariantType type = 3 [(validate.rules).enum = {
    not_in: [0]
  }];
  string group_name = 4 [(validate.rules).string.max_len = 50];
  bool is_required = 5;
  int32 max_selections = 6 [(validate.rules).int32 = {
    gte: 1,
    lte: 20
  }];
  int32 sort_order = 7 [(validate.rules).int32.gte = 0];
}

message CreateMenuItemResponse {
  MenuItem menu_item = 1 [(validate.rules).message.required = true];
}

message GetMenuItemRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message GetMenuItemResponse {
  MenuItem menu_item = 1 [(validate.rules).message.required = true];
}

message UpdateMenuItemRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  MenuItem menu_item = 2 [(validate.rules).message.required = true];
}

message UpdateMenuItemResponse {
  MenuItem menu_item = 1 [(validate.rules).message.required = true];
}

message DeleteMenuItemRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message ListMenuItemsRequest {
  com.gastroflow.common.UUID category_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
  com.gastroflow.common.PaginationRequest pagination = 3 [(validate.rules).message.required = true];
  repeated com.gastroflow.common.MenuItemStatus status_filter = 4 [(validate.rules).repeated.max_items = 10];
  repeated DietaryProperty dietary_filter = 5 [(validate.rules).repeated.max_items = 20];
  bool available_only = 6;
}

message ListMenuItemsResponse {
  repeated MenuItem menu_items = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message SearchMenuItemsRequest {
  com.gastroflow.common.UUID restaurant_id = 1 [(validate.rules).message.required = true];
  string query = 2 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];
  com.gastroflow.common.PaginationRequest pagination = 3 [(validate.rules).message.required = true];
  repeated com.gastroflow.common.MenuItemStatus status_filter = 4;
  repeated DietaryProperty dietary_filter = 5;
}

message SearchMenuItemsResponse {
  repeated MenuItem menu_items = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message UpdateMenuItemStatusRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
  com.gastroflow.common.MenuItemStatus status = 3 [(validate.rules).enum = {
    not_in: [0]
  }];
}

message UpdateMenuItemStatusResponse {
  MenuItem menu_item = 1 [(validate.rules).message.required = true];
}

message ReorderMenuItemsRequest {
  com.gastroflow.common.UUID category_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
  repeated MenuItemOrder menu_item_orders = 3 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 200
  }];
}

message MenuItemOrder {
  com.gastroflow.common.UUID menu_item_id = 1 [(validate.rules).message.required = true];
  int32 sort_order = 2 [(validate.rules).int32.gte = 0];
}

message ReorderMenuItemsResponse {
  repeated MenuItem menu_items = 1;
}

message GetPopularMenuItemsRequest {
  com.gastroflow.common.UUID restaurant_id = 1 [(validate.rules).message.required = true];
  int32 limit = 2 [(validate.rules).int32 = {
    gte: 1,
    lte: 50
  }];
  com.gastroflow.common.UUID category_id = 3;
}

message GetPopularMenuItemsResponse {
  repeated MenuItem menu_items = 1;
}