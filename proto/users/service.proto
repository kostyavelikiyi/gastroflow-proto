syntax = "proto3";

package com.gastroflow.users;

import "users/models.proto";
import "common/types.proto";
import "common/enums.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "github.com/gastroflow/proto-go/users";

// UserService - gRPC сервис для управления пользователями
service UserService {
  // Создать нового пользователя
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // Получить пользователя по ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // Получить пользователя по телефону
  rpc GetUserByPhone(GetUserByPhoneRequest) returns (GetUserByPhoneResponse);
  
  // Обновить пользователя
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // Удалить пользователя (мягкое удаление)
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
  
  // Получить список пользователей
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Поиск пользователей
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
  
  // Изменить статус пользователя
  rpc UpdateUserStatus(UpdateUserStatusRequest) returns (UpdateUserStatusResponse);
  
  // Изменить роль пользователя
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
}

// UserAddressService - gRPC сервис для управления адресами пользователей
service UserAddressService {
  // Добавить адрес пользователя
  rpc AddUserAddress(AddUserAddressRequest) returns (AddUserAddressResponse);
  
  // Получить адрес по ID
  rpc GetUserAddress(GetUserAddressRequest) returns (GetUserAddressResponse);
  
  // Обновить адрес пользователя
  rpc UpdateUserAddress(UpdateUserAddressRequest) returns (UpdateUserAddressResponse);
  
  // Удалить адрес пользователя
  rpc DeleteUserAddress(DeleteUserAddressRequest) returns (google.protobuf.Empty);
  
  // Получить список адресов пользователя
  rpc ListUserAddresses(ListUserAddressesRequest) returns (ListUserAddressesResponse);
  
  // Установить адрес по умолчанию
  rpc SetDefaultAddress(SetDefaultAddressRequest) returns (SetDefaultAddressResponse);
}

// AuthService - gRPC сервис для аутентификации и авторизации
service AuthService {
  // Создать сессию (вход в систему)
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  
  // Получить информацию о сессии
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  
  // Обновить сессию (продлить время жизни)
  rpc RefreshSession(RefreshSessionRequest) returns (RefreshSessionResponse);
  
  // Удалить сессию (выход из системы)
  rpc DeleteSession(DeleteSessionRequest) returns (google.protobuf.Empty);
  
  // Получить все активные сессии пользователя
  rpc ListUserSessions(ListUserSessionsRequest) returns (ListUserSessionsResponse);
  
  // Удалить все сессии пользователя
  rpc DeleteAllUserSessions(DeleteAllUserSessionsRequest) returns (google.protobuf.Empty);
  
  // Проверить разрешения пользователя
  rpc CheckPermissions(CheckPermissionsRequest) returns (CheckPermissionsResponse);
}

// UserProfileService - gRPC сервис для управления профилем пользователя
service UserProfileService {
  // Получить профиль пользователя
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);
  
  // Обновить профиль пользователя
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
  
  // Обновить настройки пользователя
  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse);
  
  // Добавить ресторан в избранное
  rpc AddFavoriteRestaurant(AddFavoriteRestaurantRequest) returns (AddFavoriteRestaurantResponse);
  
  // Удалить ресторан из избранного
  rpc RemoveFavoriteRestaurant(RemoveFavoriteRestaurantRequest) returns (google.protobuf.Empty);
  
  // Добавить блюдо в избранное
  rpc AddFavoriteMenuItem(AddFavoriteMenuItemRequest) returns (AddFavoriteMenuItemResponse);
  
  // Удалить блюдо из избранного
  rpc RemoveFavoriteMenuItem(RemoveFavoriteMenuItemRequest) returns (google.protobuf.Empty);
  
  // Обновить информацию о лояльности
  rpc UpdateLoyaltyInfo(UpdateLoyaltyInfoRequest) returns (UpdateLoyaltyInfoResponse);
}

// Запросы и ответы для UserService

message CreateUserRequest {
  string first_name = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 50
  }];
  string last_name = 2 [(validate.rules).string.max_len = 50];
  com.gastroflow.common.ContactInfo contact_info = 3 [(validate.rules).message.required = true];
  com.gastroflow.common.UserRole role = 4 [(validate.rules).enum = {
    not_in: [0]
  }];
  com.gastroflow.common.Language preferred_language = 5 [(validate.rules).enum = {
    not_in: [0]
  }];
  UserSettings settings = 6;
  UserProfile profile = 7;
}

message CreateUserResponse {
  User user = 1 [(validate.rules).message.required = true];
}

message GetUserRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
}

message GetUserResponse {
  User user = 1 [(validate.rules).message.required = true];
}

message GetUserByPhoneRequest {
  string phone = 1 [(validate.rules).string = {
    pattern: "^\\+[1-9]\\d{10,14}$"
  }];
}

message GetUserByPhoneResponse {
  User user = 1 [(validate.rules).message.required = true];
}

message UpdateUserRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  User user = 2 [(validate.rules).message.required = true];
}

message UpdateUserResponse {
  User user = 1 [(validate.rules).message.required = true];
}

message DeleteUserRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
}

message ListUsersRequest {
  com.gastroflow.common.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  repeated com.gastroflow.common.UserRole role_filter = 2 [(validate.rules).repeated.max_items = 10];
  repeated UserStatus status_filter = 3 [(validate.rules).repeated.max_items = 10];
  com.gastroflow.common.UUID restaurant_id = 4;
  bool active_only = 5;
}

message ListUsersResponse {
  repeated User users = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message SearchUsersRequest {
  string query = 1 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];
  com.gastroflow.common.PaginationRequest pagination = 2 [(validate.rules).message.required = true];
  repeated com.gastroflow.common.UserRole role_filter = 3 [(validate.rules).repeated.max_items = 10];
  com.gastroflow.common.UUID restaurant_id = 4;
}

message SearchUsersResponse {
  repeated User users = 1;
  com.gastroflow.common.PaginationResponse pagination = 2 [(validate.rules).message.required = true];
}

message UpdateUserStatusRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  UserStatus status = 2 [(validate.rules).enum = {
    not_in: [0]
  }];
  string reason = 3 [(validate.rules).string.max_len = 500];
}

message UpdateUserStatusResponse {
  User user = 1 [(validate.rules).message.required = true];
}

message UpdateUserRoleRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UserRole role = 2 [(validate.rules).enum = {
    not_in: [0]
  }];
  com.gastroflow.common.UUID restaurant_id = 3;
  repeated Permission permissions = 4 [(validate.rules).repeated.max_items = 50];
}

message UpdateUserRoleResponse {
  User user = 1 [(validate.rules).message.required = true];
}

// Запросы и ответы для UserAddressService

message AddUserAddressRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.Address address = 2 [(validate.rules).message.required = true];
  AddressType type = 3 [(validate.rules).enum = {
    not_in: [0]
  }];
  string label = 4 [(validate.rules).string.max_len = 50];
  bool is_default = 5;
}

message AddUserAddressResponse {
  UserAddress address = 1 [(validate.rules).message.required = true];
}

message GetUserAddressRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID user_id = 2 [(validate.rules).message.required = true];
}

message GetUserAddressResponse {
  UserAddress address = 1 [(validate.rules).message.required = true];
}

message UpdateUserAddressRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  UserAddress address = 2 [(validate.rules).message.required = true];
}

message UpdateUserAddressResponse {
  UserAddress address = 1 [(validate.rules).message.required = true];
}

message DeleteUserAddressRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID user_id = 2 [(validate.rules).message.required = true];
}

message ListUserAddressesRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  bool active_only = 2;
}

message ListUserAddressesResponse {
  repeated UserAddress addresses = 1;
}

message SetDefaultAddressRequest {
  com.gastroflow.common.UUID id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID user_id = 2 [(validate.rules).message.required = true];
}

message SetDefaultAddressResponse {
  UserAddress address = 1 [(validate.rules).message.required = true];
}

// Запросы и ответы для AuthService

message CreateSessionRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  string client_ip = 2 [(validate.rules).string.max_len = 45];
  string client_user_agent = 3 [(validate.rules).string.max_len = 500];
  DeviceInfo device_info = 4;
  int32 expires_in_seconds = 5 [(validate.rules).int32 = {
    gte: 300,
    lte: 31536000
  }];
}

message CreateSessionResponse {
  Session session = 1 [(validate.rules).message.required = true];
  string access_token = 2 [(validate.rules).string.min_len = 1];
}

message GetSessionRequest {
  string session_id = 1 [(validate.rules).string.min_len = 1];
}

message GetSessionResponse {
  Session session = 1 [(validate.rules).message.required = true];
  User user = 2 [(validate.rules).message.required = true];
}

message RefreshSessionRequest {
  string session_id = 1 [(validate.rules).string.min_len = 1];
  int32 extends_by_seconds = 2 [(validate.rules).int32 = {
    gte: 300,
    lte: 31536000
  }];
}

message RefreshSessionResponse {
  Session session = 1 [(validate.rules).message.required = true];
  string access_token = 2 [(validate.rules).string.min_len = 1];
}

message DeleteSessionRequest {
  string session_id = 1 [(validate.rules).string.min_len = 1];
}

message ListUserSessionsRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  bool active_only = 2;
}

message ListUserSessionsResponse {
  repeated Session sessions = 1;
}

message DeleteAllUserSessionsRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
}

message CheckPermissionsRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2;
  repeated Permission required_permissions = 3 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 50
  }];
}

message CheckPermissionsResponse {
  bool has_permissions = 1;
  repeated Permission granted_permissions = 2;
  repeated Permission denied_permissions = 3;
}

// Запросы и ответы для UserProfileService

message GetProfileRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
}

message GetProfileResponse {
  UserProfile profile = 1 [(validate.rules).message.required = true];
}

message UpdateProfileRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  UserProfile profile = 2 [(validate.rules).message.required = true];
}

message UpdateProfileResponse {
  UserProfile profile = 1 [(validate.rules).message.required = true];
}

message UpdateSettingsRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  UserSettings settings = 2 [(validate.rules).message.required = true];
}

message UpdateSettingsResponse {
  UserSettings settings = 1 [(validate.rules).message.required = true];
}

message AddFavoriteRestaurantRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message AddFavoriteRestaurantResponse {
  repeated com.gastroflow.common.UUID favorite_restaurants = 1;
}

message RemoveFavoriteRestaurantRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID restaurant_id = 2 [(validate.rules).message.required = true];
}

message AddFavoriteMenuItemRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID menu_item_id = 2 [(validate.rules).message.required = true];
}

message AddFavoriteMenuItemResponse {
  repeated com.gastroflow.common.UUID favorite_menu_items = 1;
}

message RemoveFavoriteMenuItemRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  com.gastroflow.common.UUID menu_item_id = 2 [(validate.rules).message.required = true];
}

message UpdateLoyaltyInfoRequest {
  com.gastroflow.common.UUID user_id = 1 [(validate.rules).message.required = true];
  LoyaltyInfo loyalty_info = 2 [(validate.rules).message.required = true];
}

message UpdateLoyaltyInfoResponse {
  LoyaltyInfo loyalty_info = 1 [(validate.rules).message.required = true];
}