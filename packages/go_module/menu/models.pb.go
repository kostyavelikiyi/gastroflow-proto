// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: menu/models.proto

package menu

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common "github.com/gastroflow/proto-go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VariantType - тип варианта позиции меню
type VariantType int32

const (
	VariantType_VARIANT_TYPE_UNSPECIFIED VariantType = 0
	VariantType_VARIANT_TYPE_SIZE        VariantType = 1 // Размер (маленький, большой)
	VariantType_VARIANT_TYPE_EXTRA       VariantType = 2 // Добавка (сыр, бекон)
	VariantType_VARIANT_TYPE_EXCLUDE     VariantType = 3 // Исключение (без лука, без соуса)
	VariantType_VARIANT_TYPE_COOKING     VariantType = 4 // Способ приготовления (слабо прожаренное)
	VariantType_VARIANT_TYPE_SIDE        VariantType = 5 // Гарнир
	VariantType_VARIANT_TYPE_SAUCE       VariantType = 6 // Соус
	VariantType_VARIANT_TYPE_DRINK       VariantType = 7 // Напиток
)

// Enum value maps for VariantType.
var (
	VariantType_name = map[int32]string{
		0: "VARIANT_TYPE_UNSPECIFIED",
		1: "VARIANT_TYPE_SIZE",
		2: "VARIANT_TYPE_EXTRA",
		3: "VARIANT_TYPE_EXCLUDE",
		4: "VARIANT_TYPE_COOKING",
		5: "VARIANT_TYPE_SIDE",
		6: "VARIANT_TYPE_SAUCE",
		7: "VARIANT_TYPE_DRINK",
	}
	VariantType_value = map[string]int32{
		"VARIANT_TYPE_UNSPECIFIED": 0,
		"VARIANT_TYPE_SIZE":        1,
		"VARIANT_TYPE_EXTRA":       2,
		"VARIANT_TYPE_EXCLUDE":     3,
		"VARIANT_TYPE_COOKING":     4,
		"VARIANT_TYPE_SIDE":        5,
		"VARIANT_TYPE_SAUCE":       6,
		"VARIANT_TYPE_DRINK":       7,
	}
)

func (x VariantType) Enum() *VariantType {
	p := new(VariantType)
	*p = x
	return p
}

func (x VariantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariantType) Descriptor() protoreflect.EnumDescriptor {
	return file_menu_models_proto_enumTypes[0].Descriptor()
}

func (VariantType) Type() protoreflect.EnumType {
	return &file_menu_models_proto_enumTypes[0]
}

func (x VariantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariantType.Descriptor instead.
func (VariantType) EnumDescriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{0}
}

// Allergen - аллергены
type Allergen int32

const (
	Allergen_ALLERGEN_UNSPECIFIED Allergen = 0
	Allergen_ALLERGEN_GLUTEN      Allergen = 1 // Глютен
	Allergen_ALLERGEN_DAIRY       Allergen = 2 // Молочные продукты
	Allergen_ALLERGEN_EGGS        Allergen = 3 // Яйца
	Allergen_ALLERGEN_NUTS        Allergen = 4 // Орехи
	Allergen_ALLERGEN_PEANUTS     Allergen = 5 // Арахис
	Allergen_ALLERGEN_SHELLFISH   Allergen = 6 // Моллюски
	Allergen_ALLERGEN_FISH        Allergen = 7 // Рыба
	Allergen_ALLERGEN_SOY         Allergen = 8 // Соя
	Allergen_ALLERGEN_SESAME      Allergen = 9 // Кунжут
)

// Enum value maps for Allergen.
var (
	Allergen_name = map[int32]string{
		0: "ALLERGEN_UNSPECIFIED",
		1: "ALLERGEN_GLUTEN",
		2: "ALLERGEN_DAIRY",
		3: "ALLERGEN_EGGS",
		4: "ALLERGEN_NUTS",
		5: "ALLERGEN_PEANUTS",
		6: "ALLERGEN_SHELLFISH",
		7: "ALLERGEN_FISH",
		8: "ALLERGEN_SOY",
		9: "ALLERGEN_SESAME",
	}
	Allergen_value = map[string]int32{
		"ALLERGEN_UNSPECIFIED": 0,
		"ALLERGEN_GLUTEN":      1,
		"ALLERGEN_DAIRY":       2,
		"ALLERGEN_EGGS":        3,
		"ALLERGEN_NUTS":        4,
		"ALLERGEN_PEANUTS":     5,
		"ALLERGEN_SHELLFISH":   6,
		"ALLERGEN_FISH":        7,
		"ALLERGEN_SOY":         8,
		"ALLERGEN_SESAME":      9,
	}
)

func (x Allergen) Enum() *Allergen {
	p := new(Allergen)
	*p = x
	return p
}

func (x Allergen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allergen) Descriptor() protoreflect.EnumDescriptor {
	return file_menu_models_proto_enumTypes[1].Descriptor()
}

func (Allergen) Type() protoreflect.EnumType {
	return &file_menu_models_proto_enumTypes[1]
}

func (x Allergen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allergen.Descriptor instead.
func (Allergen) EnumDescriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{1}
}

// DietaryProperty - особенности питания
type DietaryProperty int32

const (
	DietaryProperty_DIETARY_PROPERTY_UNSPECIFIED DietaryProperty = 0
	DietaryProperty_DIETARY_PROPERTY_VEGETARIAN  DietaryProperty = 1  // Вегетарианское
	DietaryProperty_DIETARY_PROPERTY_VEGAN       DietaryProperty = 2  // Веганское
	DietaryProperty_DIETARY_PROPERTY_HALAL       DietaryProperty = 3  // Халяль
	DietaryProperty_DIETARY_PROPERTY_KOSHER      DietaryProperty = 4  // Кошер
	DietaryProperty_DIETARY_PROPERTY_SPICY       DietaryProperty = 5  // Острое
	DietaryProperty_DIETARY_PROPERTY_HOT         DietaryProperty = 6  // Горячее
	DietaryProperty_DIETARY_PROPERTY_COLD        DietaryProperty = 7  // Холодное
	DietaryProperty_DIETARY_PROPERTY_GLUTEN_FREE DietaryProperty = 8  // Без глютена
	DietaryProperty_DIETARY_PROPERTY_DAIRY_FREE  DietaryProperty = 9  // Без молочных продуктов
	DietaryProperty_DIETARY_PROPERTY_LOW_FAT     DietaryProperty = 10 // Низкожирное
	DietaryProperty_DIETARY_PROPERTY_LOW_CALORIE DietaryProperty = 11 // Низкокалорийное
)

// Enum value maps for DietaryProperty.
var (
	DietaryProperty_name = map[int32]string{
		0:  "DIETARY_PROPERTY_UNSPECIFIED",
		1:  "DIETARY_PROPERTY_VEGETARIAN",
		2:  "DIETARY_PROPERTY_VEGAN",
		3:  "DIETARY_PROPERTY_HALAL",
		4:  "DIETARY_PROPERTY_KOSHER",
		5:  "DIETARY_PROPERTY_SPICY",
		6:  "DIETARY_PROPERTY_HOT",
		7:  "DIETARY_PROPERTY_COLD",
		8:  "DIETARY_PROPERTY_GLUTEN_FREE",
		9:  "DIETARY_PROPERTY_DAIRY_FREE",
		10: "DIETARY_PROPERTY_LOW_FAT",
		11: "DIETARY_PROPERTY_LOW_CALORIE",
	}
	DietaryProperty_value = map[string]int32{
		"DIETARY_PROPERTY_UNSPECIFIED": 0,
		"DIETARY_PROPERTY_VEGETARIAN":  1,
		"DIETARY_PROPERTY_VEGAN":       2,
		"DIETARY_PROPERTY_HALAL":       3,
		"DIETARY_PROPERTY_KOSHER":      4,
		"DIETARY_PROPERTY_SPICY":       5,
		"DIETARY_PROPERTY_HOT":         6,
		"DIETARY_PROPERTY_COLD":        7,
		"DIETARY_PROPERTY_GLUTEN_FREE": 8,
		"DIETARY_PROPERTY_DAIRY_FREE":  9,
		"DIETARY_PROPERTY_LOW_FAT":     10,
		"DIETARY_PROPERTY_LOW_CALORIE": 11,
	}
)

func (x DietaryProperty) Enum() *DietaryProperty {
	p := new(DietaryProperty)
	*p = x
	return p
}

func (x DietaryProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DietaryProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_menu_models_proto_enumTypes[2].Descriptor()
}

func (DietaryProperty) Type() protoreflect.EnumType {
	return &file_menu_models_proto_enumTypes[2]
}

func (x DietaryProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DietaryProperty.Descriptor instead.
func (DietaryProperty) EnumDescriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{2}
}

// Menu - меню ресторана
type Menu struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор меню
	Id *common.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название меню
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание меню
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Идентификатор ресторана
	RestaurantId *common.UUID `protobuf:"bytes,4,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id,omitempty"`
	// Категории в меню
	Categories []*Category `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
	// Активность меню
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Время действия меню (например, завтрак, обед, ужин)
	TimeSlot *TimeSlot `protobuf:"bytes,7,opt,name=time_slot,json=timeSlot,proto3" json:"time_slot,omitempty"`
	// Дни недели, когда меню активно
	ActiveDays []common.WeekDay `protobuf:"varint,8,rep,packed,name=active_days,json=activeDays,proto3,enum=com.gastroflow.common.WeekDay" json:"active_days,omitempty"`
	// Локализация меню
	Language common.Language `protobuf:"varint,9,opt,name=language,proto3,enum=com.gastroflow.common.Language" json:"language,omitempty"`
	// Информация об аудите
	AuditInfo     *common.AuditInfo `protobuf:"bytes,10,opt,name=audit_info,json=auditInfo,proto3" json:"audit_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Menu) Reset() {
	*x = Menu{}
	mi := &file_menu_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{0}
}

func (x *Menu) GetId() *common.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Menu) GetRestaurantId() *common.UUID {
	if x != nil {
		return x.RestaurantId
	}
	return nil
}

func (x *Menu) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Menu) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Menu) GetTimeSlot() *TimeSlot {
	if x != nil {
		return x.TimeSlot
	}
	return nil
}

func (x *Menu) GetActiveDays() []common.WeekDay {
	if x != nil {
		return x.ActiveDays
	}
	return nil
}

func (x *Menu) GetLanguage() common.Language {
	if x != nil {
		return x.Language
	}
	return common.Language(0)
}

func (x *Menu) GetAuditInfo() *common.AuditInfo {
	if x != nil {
		return x.AuditInfo
	}
	return nil
}

// Category - категория блюд в меню
type Category struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор категории
	Id *common.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название категории
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание категории
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Позиции в категории
	Items []*MenuItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
	// Порядок сортировки категории
	SortOrder int32 `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// URL изображения категории
	ImageUrl string `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Активность категории
	IsActive bool `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Родительская категория (для подкатегорий)
	ParentId *common.UUID `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Информация об аудите
	AuditInfo     *common.AuditInfo `protobuf:"bytes,9,opt,name=audit_info,json=auditInfo,proto3" json:"audit_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_menu_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{1}
}

func (x *Category) GetId() *common.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Category) GetItems() []*MenuItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Category) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *Category) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Category) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Category) GetParentId() *common.UUID {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *Category) GetAuditInfo() *common.AuditInfo {
	if x != nil {
		return x.AuditInfo
	}
	return nil
}

// MenuItem - позиция меню (блюдо)
type MenuItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор позиции
	Id *common.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название блюда
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание блюда
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Базовая цена
	Price *common.Money `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	// Статус позиции
	Status common.MenuItemStatus `protobuf:"varint,5,opt,name=status,proto3,enum=com.gastroflow.common.MenuItemStatus" json:"status,omitempty"`
	// Доступные варианты (размеры, добавки и т.д.)
	Variants []*MenuItemVariant `protobuf:"bytes,6,rep,name=variants,proto3" json:"variants,omitempty"`
	// Время приготовления в минутах
	CookingTime int32 `protobuf:"varint,7,opt,name=cooking_time,json=cookingTime,proto3" json:"cooking_time,omitempty"`
	// Пищевая ценность
	NutritionInfo *NutritionInfo `protobuf:"bytes,8,opt,name=nutrition_info,json=nutritionInfo,proto3" json:"nutrition_info,omitempty"`
	// Информация об аллергенах
	Allergens []Allergen `protobuf:"varint,9,rep,packed,name=allergens,proto3,enum=com.gastroflow.menu.Allergen" json:"allergens,omitempty"`
	// URL изображения блюда
	ImageUrl string `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Дополнительные изображения
	AdditionalImages []string `protobuf:"bytes,11,rep,name=additional_images,json=additionalImages,proto3" json:"additional_images,omitempty"`
	// Порядок сортировки в категории
	SortOrder int32 `protobuf:"varint,12,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// Вес/объем порции
	PortionSize string `protobuf:"bytes,13,opt,name=portion_size,json=portionSize,proto3" json:"portion_size,omitempty"`
	// Особенности блюда (острое, вегетарианское и т.д.)
	DietaryProperties []DietaryProperty `protobuf:"varint,14,rep,packed,name=dietary_properties,json=dietaryProperties,proto3,enum=com.gastroflow.menu.DietaryProperty" json:"dietary_properties,omitempty"`
	// Ингредиенты
	Ingredients []string `protobuf:"bytes,15,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	// Идентификатор категории
	CategoryId *common.UUID `protobuf:"bytes,16,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// Популярность блюда (для рекомендаций)
	PopularityScore int32 `protobuf:"varint,17,opt,name=popularity_score,json=popularityScore,proto3" json:"popularity_score,omitempty"`
	// Информация об аудите
	AuditInfo     *common.AuditInfo `protobuf:"bytes,18,opt,name=audit_info,json=auditInfo,proto3" json:"audit_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuItem) Reset() {
	*x = MenuItem{}
	mi := &file_menu_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItem) ProtoMessage() {}

func (x *MenuItem) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItem.ProtoReflect.Descriptor instead.
func (*MenuItem) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{2}
}

func (x *MenuItem) GetId() *common.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MenuItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MenuItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MenuItem) GetPrice() *common.Money {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *MenuItem) GetStatus() common.MenuItemStatus {
	if x != nil {
		return x.Status
	}
	return common.MenuItemStatus(0)
}

func (x *MenuItem) GetVariants() []*MenuItemVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *MenuItem) GetCookingTime() int32 {
	if x != nil {
		return x.CookingTime
	}
	return 0
}

func (x *MenuItem) GetNutritionInfo() *NutritionInfo {
	if x != nil {
		return x.NutritionInfo
	}
	return nil
}

func (x *MenuItem) GetAllergens() []Allergen {
	if x != nil {
		return x.Allergens
	}
	return nil
}

func (x *MenuItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *MenuItem) GetAdditionalImages() []string {
	if x != nil {
		return x.AdditionalImages
	}
	return nil
}

func (x *MenuItem) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *MenuItem) GetPortionSize() string {
	if x != nil {
		return x.PortionSize
	}
	return ""
}

func (x *MenuItem) GetDietaryProperties() []DietaryProperty {
	if x != nil {
		return x.DietaryProperties
	}
	return nil
}

func (x *MenuItem) GetIngredients() []string {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *MenuItem) GetCategoryId() *common.UUID {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

func (x *MenuItem) GetPopularityScore() int32 {
	if x != nil {
		return x.PopularityScore
	}
	return 0
}

func (x *MenuItem) GetAuditInfo() *common.AuditInfo {
	if x != nil {
		return x.AuditInfo
	}
	return nil
}

// MenuItemVariant - вариант позиции меню
type MenuItemVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор варианта
	Id *common.UUID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название варианта
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Дополнительная цена (может быть отрицательной)
	PriceModifier *common.Money `protobuf:"bytes,3,opt,name=price_modifier,json=priceModifier,proto3" json:"price_modifier,omitempty"`
	// Тип варианта
	Type VariantType `protobuf:"varint,4,opt,name=type,proto3,enum=com.gastroflow.menu.VariantType" json:"type,omitempty"`
	// Группа вариантов (для группировки связанных вариантов)
	GroupName string `protobuf:"bytes,5,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Обязательность выбора варианта
	IsRequired bool `protobuf:"varint,6,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	// Максимальное количество выборов в группе
	MaxSelections int32 `protobuf:"varint,7,opt,name=max_selections,json=maxSelections,proto3" json:"max_selections,omitempty"`
	// Порядок сортировки варианта
	SortOrder int32 `protobuf:"varint,8,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// Доступность варианта
	IsAvailable   bool `protobuf:"varint,9,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuItemVariant) Reset() {
	*x = MenuItemVariant{}
	mi := &file_menu_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuItemVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuItemVariant) ProtoMessage() {}

func (x *MenuItemVariant) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuItemVariant.ProtoReflect.Descriptor instead.
func (*MenuItemVariant) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{3}
}

func (x *MenuItemVariant) GetId() *common.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MenuItemVariant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MenuItemVariant) GetPriceModifier() *common.Money {
	if x != nil {
		return x.PriceModifier
	}
	return nil
}

func (x *MenuItemVariant) GetType() VariantType {
	if x != nil {
		return x.Type
	}
	return VariantType_VARIANT_TYPE_UNSPECIFIED
}

func (x *MenuItemVariant) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *MenuItemVariant) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *MenuItemVariant) GetMaxSelections() int32 {
	if x != nil {
		return x.MaxSelections
	}
	return 0
}

func (x *MenuItemVariant) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *MenuItemVariant) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

// NutritionInfo - информация о пищевой ценности
type NutritionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Калорийность на 100г
	CaloriesPer_100G float64 `protobuf:"fixed64,1,opt,name=calories_per_100g,json=caloriesPer100g,proto3" json:"calories_per_100g,omitempty"`
	// Белки в граммах на 100г
	ProteinPer_100G float64 `protobuf:"fixed64,2,opt,name=protein_per_100g,json=proteinPer100g,proto3" json:"protein_per_100g,omitempty"`
	// Жиры в граммах на 100г
	FatsPer_100G float64 `protobuf:"fixed64,3,opt,name=fats_per_100g,json=fatsPer100g,proto3" json:"fats_per_100g,omitempty"`
	// Углеводы в граммах на 100г
	CarbsPer_100G float64 `protobuf:"fixed64,4,opt,name=carbs_per_100g,json=carbsPer100g,proto3" json:"carbs_per_100g,omitempty"`
	// Общий вес порции в граммах
	PortionWeight float64 `protobuf:"fixed64,5,opt,name=portion_weight,json=portionWeight,proto3" json:"portion_weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NutritionInfo) Reset() {
	*x = NutritionInfo{}
	mi := &file_menu_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NutritionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NutritionInfo) ProtoMessage() {}

func (x *NutritionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NutritionInfo.ProtoReflect.Descriptor instead.
func (*NutritionInfo) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{4}
}

func (x *NutritionInfo) GetCaloriesPer_100G() float64 {
	if x != nil {
		return x.CaloriesPer_100G
	}
	return 0
}

func (x *NutritionInfo) GetProteinPer_100G() float64 {
	if x != nil {
		return x.ProteinPer_100G
	}
	return 0
}

func (x *NutritionInfo) GetFatsPer_100G() float64 {
	if x != nil {
		return x.FatsPer_100G
	}
	return 0
}

func (x *NutritionInfo) GetCarbsPer_100G() float64 {
	if x != nil {
		return x.CarbsPer_100G
	}
	return 0
}

func (x *NutritionInfo) GetPortionWeight() float64 {
	if x != nil {
		return x.PortionWeight
	}
	return 0
}

// TimeSlot - временной слот для меню
type TimeSlot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Время начала действия меню
	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Время окончания действия меню
	EndTime string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Название временного слота
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSlot) Reset() {
	*x = TimeSlot{}
	mi := &file_menu_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSlot) ProtoMessage() {}

func (x *TimeSlot) ProtoReflect() protoreflect.Message {
	mi := &file_menu_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSlot.ProtoReflect.Descriptor instead.
func (*TimeSlot) Descriptor() ([]byte, []int) {
	return file_menu_models_proto_rawDescGZIP(), []int{5}
}

func (x *TimeSlot) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TimeSlot) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TimeSlot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_menu_models_proto protoreflect.FileDescriptor

const file_menu_models_proto_rawDesc = "" +
	"\n" +
	"\x11menu/models.proto\x12\x13com.gastroflow.menu\x1a\x12common/enums.proto\x1a\x12common/types.proto\x1a\x17validate/validate.proto\"\xd4\x04\n" +
	"\x04Menu\x125\n" +
	"\x02id\x18\x01 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\x04name\x12*\n" +
	"\vdescription\x18\x03 \x01(\tB\b\xfaB\x05r\x03\x18\xe8\aR\vdescription\x12J\n" +
	"\rrestaurant_id\x18\x04 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\frestaurantId\x12G\n" +
	"\n" +
	"categories\x18\x05 \x03(\v2\x1d.com.gastroflow.menu.CategoryB\b\xfaB\x05\x92\x01\x02\x10dR\n" +
	"categories\x12\x1b\n" +
	"\tis_active\x18\x06 \x01(\bR\bisActive\x12:\n" +
	"\ttime_slot\x18\a \x01(\v2\x1d.com.gastroflow.menu.TimeSlotR\btimeSlot\x12I\n" +
	"\vactive_days\x18\b \x03(\x0e2\x1e.com.gastroflow.common.WeekDayB\b\xfaB\x05\x92\x01\x02\x10\aR\n" +
	"activeDays\x12E\n" +
	"\blanguage\x18\t \x01(\x0e2\x1f.com.gastroflow.common.LanguageB\b\xfaB\x05\x82\x01\x02 \x00R\blanguage\x12I\n" +
	"\n" +
	"audit_info\x18\n" +
	" \x01(\v2 .com.gastroflow.common.AuditInfoB\b\xfaB\x05\x8a\x01\x02\x10\x01R\tauditInfo\"\xbd\x03\n" +
	"\bCategory\x125\n" +
	"\x02id\x18\x01 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x02id\x12\x1d\n" +
	"\x04name\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x04name\x12*\n" +
	"\vdescription\x18\x03 \x01(\tB\b\xfaB\x05r\x03\x18\xf4\x03R\vdescription\x12>\n" +
	"\x05items\x18\x04 \x03(\v2\x1d.com.gastroflow.menu.MenuItemB\t\xfaB\x06\x92\x01\x03\x10\xc8\x01R\x05items\x12&\n" +
	"\n" +
	"sort_order\x18\x05 \x01(\x05B\a\xfaB\x04\x1a\x02(\x00R\tsortOrder\x12%\n" +
	"\timage_url\x18\x06 \x01(\tB\b\xfaB\x05r\x03\x18\xf4\x03R\bimageUrl\x12\x1b\n" +
	"\tis_active\x18\a \x01(\bR\bisActive\x128\n" +
	"\tparent_id\x18\b \x01(\v2\x1b.com.gastroflow.common.UUIDR\bparentId\x12I\n" +
	"\n" +
	"audit_info\x18\t \x01(\v2 .com.gastroflow.common.AuditInfoB\b\xfaB\x05\x8a\x01\x02\x10\x01R\tauditInfo\"\xb1\b\n" +
	"\bMenuItem\x125\n" +
	"\x02id\x18\x01 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xfaB\ar\x05\x10\x01\x18\xc8\x01R\x04name\x12*\n" +
	"\vdescription\x18\x03 \x01(\tB\b\xfaB\x05r\x03\x18\xe8\aR\vdescription\x12<\n" +
	"\x05price\x18\x04 \x01(\v2\x1c.com.gastroflow.common.MoneyB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05price\x12G\n" +
	"\x06status\x18\x05 \x01(\x0e2%.com.gastroflow.common.MenuItemStatusB\b\xfaB\x05\x82\x01\x02 \x00R\x06status\x12J\n" +
	"\bvariants\x18\x06 \x03(\v2$.com.gastroflow.menu.MenuItemVariantB\b\xfaB\x05\x92\x01\x02\x10dR\bvariants\x12,\n" +
	"\fcooking_time\x18\a \x01(\x05B\t\xfaB\x06\x1a\x04\x18x(\x01R\vcookingTime\x12I\n" +
	"\x0enutrition_info\x18\b \x01(\v2\".com.gastroflow.menu.NutritionInfoR\rnutritionInfo\x12E\n" +
	"\tallergens\x18\t \x03(\x0e2\x1d.com.gastroflow.menu.AllergenB\b\xfaB\x05\x92\x01\x02\x102R\tallergens\x12%\n" +
	"\timage_url\x18\n" +
	" \x01(\tB\b\xfaB\x05r\x03\x18\xf4\x03R\bimageUrl\x12<\n" +
	"\x11additional_images\x18\v \x03(\tB\x0f\xfaB\f\x92\x01\t\x10\n" +
	"\"\x05r\x03\x18\xf4\x03R\x10additionalImages\x12&\n" +
	"\n" +
	"sort_order\x18\f \x01(\x05B\a\xfaB\x04\x1a\x02(\x00R\tsortOrder\x12*\n" +
	"\fportion_size\x18\r \x01(\tB\a\xfaB\x04r\x02\x182R\vportionSize\x12]\n" +
	"\x12dietary_properties\x18\x0e \x03(\x0e2$.com.gastroflow.menu.DietaryPropertyB\b\xfaB\x05\x92\x01\x02\x10\x14R\x11dietaryProperties\x120\n" +
	"\vingredients\x18\x0f \x03(\tB\x0e\xfaB\v\x92\x01\b\x10d\"\x04r\x02\x18dR\vingredients\x12F\n" +
	"\vcategory_id\x18\x10 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\n" +
	"categoryId\x122\n" +
	"\x10popularity_score\x18\x11 \x01(\x05B\a\xfaB\x04\x1a\x02(\x00R\x0fpopularityScore\x12I\n" +
	"\n" +
	"audit_info\x18\x12 \x01(\v2 .com.gastroflow.common.AuditInfoB\b\xfaB\x05\x8a\x01\x02\x10\x01R\tauditInfo\"\xbc\x03\n" +
	"\x0fMenuItemVariant\x125\n" +
	"\x02id\x18\x01 \x01(\v2\x1b.com.gastroflow.common.UUIDB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x02id\x12\x1d\n" +
	"\x04name\x18\x02 \x01(\tB\t\xfaB\x06r\x04\x10\x01\x18dR\x04name\x12M\n" +
	"\x0eprice_modifier\x18\x03 \x01(\v2\x1c.com.gastroflow.common.MoneyB\b\xfaB\x05\x8a\x01\x02\x10\x01R\rpriceModifier\x12>\n" +
	"\x04type\x18\x04 \x01(\x0e2 .com.gastroflow.menu.VariantTypeB\b\xfaB\x05\x82\x01\x02 \x00R\x04type\x12&\n" +
	"\n" +
	"group_name\x18\x05 \x01(\tB\a\xfaB\x04r\x02\x182R\tgroupName\x12\x1f\n" +
	"\vis_required\x18\x06 \x01(\bR\n" +
	"isRequired\x120\n" +
	"\x0emax_selections\x18\a \x01(\x05B\t\xfaB\x06\x1a\x04\x18\x14(\x01R\rmaxSelections\x12&\n" +
	"\n" +
	"sort_order\x18\b \x01(\x05B\a\xfaB\x04\x1a\x02(\x00R\tsortOrder\x12!\n" +
	"\fis_available\x18\t \x01(\bR\visAvailable\"\xa6\x02\n" +
	"\rNutritionInfo\x12:\n" +
	"\x11calories_per_100g\x18\x01 \x01(\x01B\x0e\xfaB\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x0fcaloriesPer100g\x128\n" +
	"\x10protein_per_100g\x18\x02 \x01(\x01B\x0e\xfaB\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\x0eproteinPer100g\x122\n" +
	"\rfats_per_100g\x18\x03 \x01(\x01B\x0e\xfaB\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\vfatsPer100g\x124\n" +
	"\x0ecarbs_per_100g\x18\x04 \x01(\x01B\x0e\xfaB\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\fcarbsPer100g\x125\n" +
	"\x0eportion_weight\x18\x05 \x01(\x01B\x0e\xfaB\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00R\rportionWeight\"\xb3\x01\n" +
	"\bTimeSlot\x12F\n" +
	"\n" +
	"start_time\x18\x01 \x01(\tB'\xfaB$r\"2 ^([01]?[0-9]|2[0-3]):[0-5][0-9]$R\tstartTime\x12B\n" +
	"\bend_time\x18\x02 \x01(\tB'\xfaB$r\"2 ^([01]?[0-9]|2[0-3]):[0-5][0-9]$R\aendTime\x12\x1b\n" +
	"\x04name\x18\x03 \x01(\tB\a\xfaB\x04r\x02\x182R\x04name*\xd5\x01\n" +
	"\vVariantType\x12\x1c\n" +
	"\x18VARIANT_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11VARIANT_TYPE_SIZE\x10\x01\x12\x16\n" +
	"\x12VARIANT_TYPE_EXTRA\x10\x02\x12\x18\n" +
	"\x14VARIANT_TYPE_EXCLUDE\x10\x03\x12\x18\n" +
	"\x14VARIANT_TYPE_COOKING\x10\x04\x12\x15\n" +
	"\x11VARIANT_TYPE_SIDE\x10\x05\x12\x16\n" +
	"\x12VARIANT_TYPE_SAUCE\x10\x06\x12\x16\n" +
	"\x12VARIANT_TYPE_DRINK\x10\a*\xdb\x01\n" +
	"\bAllergen\x12\x18\n" +
	"\x14ALLERGEN_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fALLERGEN_GLUTEN\x10\x01\x12\x12\n" +
	"\x0eALLERGEN_DAIRY\x10\x02\x12\x11\n" +
	"\rALLERGEN_EGGS\x10\x03\x12\x11\n" +
	"\rALLERGEN_NUTS\x10\x04\x12\x14\n" +
	"\x10ALLERGEN_PEANUTS\x10\x05\x12\x16\n" +
	"\x12ALLERGEN_SHELLFISH\x10\x06\x12\x11\n" +
	"\rALLERGEN_FISH\x10\a\x12\x10\n" +
	"\fALLERGEN_SOY\x10\b\x12\x13\n" +
	"\x0fALLERGEN_SESAME\x10\t*\xfd\x02\n" +
	"\x0fDietaryProperty\x12 \n" +
	"\x1cDIETARY_PROPERTY_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bDIETARY_PROPERTY_VEGETARIAN\x10\x01\x12\x1a\n" +
	"\x16DIETARY_PROPERTY_VEGAN\x10\x02\x12\x1a\n" +
	"\x16DIETARY_PROPERTY_HALAL\x10\x03\x12\x1b\n" +
	"\x17DIETARY_PROPERTY_KOSHER\x10\x04\x12\x1a\n" +
	"\x16DIETARY_PROPERTY_SPICY\x10\x05\x12\x18\n" +
	"\x14DIETARY_PROPERTY_HOT\x10\x06\x12\x19\n" +
	"\x15DIETARY_PROPERTY_COLD\x10\a\x12 \n" +
	"\x1cDIETARY_PROPERTY_GLUTEN_FREE\x10\b\x12\x1f\n" +
	"\x1bDIETARY_PROPERTY_DAIRY_FREE\x10\t\x12\x1c\n" +
	"\x18DIETARY_PROPERTY_LOW_FAT\x10\n" +
	"\x12 \n" +
	"\x1cDIETARY_PROPERTY_LOW_CALORIE\x10\vB\xb9\x01\n" +
	"\x17com.com.gastroflow.menuB\vModelsProtoP\x01Z#github.com/gastroflow/proto-go/menu\xa2\x02\x03CGM\xaa\x02\x13Com.Gastroflow.Menu\xca\x02\x13Com\\Gastroflow\\Menu\xe2\x02\x1fCom\\Gastroflow\\Menu\\GPBMetadata\xea\x02\x15Com::Gastroflow::Menub\x06proto3"

var (
	file_menu_models_proto_rawDescOnce sync.Once
	file_menu_models_proto_rawDescData []byte
)

func file_menu_models_proto_rawDescGZIP() []byte {
	file_menu_models_proto_rawDescOnce.Do(func() {
		file_menu_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_menu_models_proto_rawDesc), len(file_menu_models_proto_rawDesc)))
	})
	return file_menu_models_proto_rawDescData
}

var file_menu_models_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_menu_models_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_menu_models_proto_goTypes = []any{
	(VariantType)(0),           // 0: com.gastroflow.menu.VariantType
	(Allergen)(0),              // 1: com.gastroflow.menu.Allergen
	(DietaryProperty)(0),       // 2: com.gastroflow.menu.DietaryProperty
	(*Menu)(nil),               // 3: com.gastroflow.menu.Menu
	(*Category)(nil),           // 4: com.gastroflow.menu.Category
	(*MenuItem)(nil),           // 5: com.gastroflow.menu.MenuItem
	(*MenuItemVariant)(nil),    // 6: com.gastroflow.menu.MenuItemVariant
	(*NutritionInfo)(nil),      // 7: com.gastroflow.menu.NutritionInfo
	(*TimeSlot)(nil),           // 8: com.gastroflow.menu.TimeSlot
	(*common.UUID)(nil),        // 9: com.gastroflow.common.UUID
	(common.WeekDay)(0),        // 10: com.gastroflow.common.WeekDay
	(common.Language)(0),       // 11: com.gastroflow.common.Language
	(*common.AuditInfo)(nil),   // 12: com.gastroflow.common.AuditInfo
	(*common.Money)(nil),       // 13: com.gastroflow.common.Money
	(common.MenuItemStatus)(0), // 14: com.gastroflow.common.MenuItemStatus
}
var file_menu_models_proto_depIdxs = []int32{
	9,  // 0: com.gastroflow.menu.Menu.id:type_name -> com.gastroflow.common.UUID
	9,  // 1: com.gastroflow.menu.Menu.restaurant_id:type_name -> com.gastroflow.common.UUID
	4,  // 2: com.gastroflow.menu.Menu.categories:type_name -> com.gastroflow.menu.Category
	8,  // 3: com.gastroflow.menu.Menu.time_slot:type_name -> com.gastroflow.menu.TimeSlot
	10, // 4: com.gastroflow.menu.Menu.active_days:type_name -> com.gastroflow.common.WeekDay
	11, // 5: com.gastroflow.menu.Menu.language:type_name -> com.gastroflow.common.Language
	12, // 6: com.gastroflow.menu.Menu.audit_info:type_name -> com.gastroflow.common.AuditInfo
	9,  // 7: com.gastroflow.menu.Category.id:type_name -> com.gastroflow.common.UUID
	5,  // 8: com.gastroflow.menu.Category.items:type_name -> com.gastroflow.menu.MenuItem
	9,  // 9: com.gastroflow.menu.Category.parent_id:type_name -> com.gastroflow.common.UUID
	12, // 10: com.gastroflow.menu.Category.audit_info:type_name -> com.gastroflow.common.AuditInfo
	9,  // 11: com.gastroflow.menu.MenuItem.id:type_name -> com.gastroflow.common.UUID
	13, // 12: com.gastroflow.menu.MenuItem.price:type_name -> com.gastroflow.common.Money
	14, // 13: com.gastroflow.menu.MenuItem.status:type_name -> com.gastroflow.common.MenuItemStatus
	6,  // 14: com.gastroflow.menu.MenuItem.variants:type_name -> com.gastroflow.menu.MenuItemVariant
	7,  // 15: com.gastroflow.menu.MenuItem.nutrition_info:type_name -> com.gastroflow.menu.NutritionInfo
	1,  // 16: com.gastroflow.menu.MenuItem.allergens:type_name -> com.gastroflow.menu.Allergen
	2,  // 17: com.gastroflow.menu.MenuItem.dietary_properties:type_name -> com.gastroflow.menu.DietaryProperty
	9,  // 18: com.gastroflow.menu.MenuItem.category_id:type_name -> com.gastroflow.common.UUID
	12, // 19: com.gastroflow.menu.MenuItem.audit_info:type_name -> com.gastroflow.common.AuditInfo
	9,  // 20: com.gastroflow.menu.MenuItemVariant.id:type_name -> com.gastroflow.common.UUID
	13, // 21: com.gastroflow.menu.MenuItemVariant.price_modifier:type_name -> com.gastroflow.common.Money
	0,  // 22: com.gastroflow.menu.MenuItemVariant.type:type_name -> com.gastroflow.menu.VariantType
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_menu_models_proto_init() }
func file_menu_models_proto_init() {
	if File_menu_models_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_menu_models_proto_rawDesc), len(file_menu_models_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_menu_models_proto_goTypes,
		DependencyIndexes: file_menu_models_proto_depIdxs,
		EnumInfos:         file_menu_models_proto_enumTypes,
		MessageInfos:      file_menu_models_proto_msgTypes,
	}.Build()
	File_menu_models_proto = out.File
	file_menu_models_proto_goTypes = nil
	file_menu_models_proto_depIdxs = nil
}
