// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: com/gastroflow/restaurants/service.proto

package restaurants

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestaurantService_CreateRestaurant_FullMethodName          = "/com.gastroflow.restaurants.RestaurantService/CreateRestaurant"
	RestaurantService_GetRestaurant_FullMethodName             = "/com.gastroflow.restaurants.RestaurantService/GetRestaurant"
	RestaurantService_UpdateRestaurant_FullMethodName          = "/com.gastroflow.restaurants.RestaurantService/UpdateRestaurant"
	RestaurantService_DeleteRestaurant_FullMethodName          = "/com.gastroflow.restaurants.RestaurantService/DeleteRestaurant"
	RestaurantService_ListRestaurants_FullMethodName           = "/com.gastroflow.restaurants.RestaurantService/ListRestaurants"
	RestaurantService_SearchRestaurants_FullMethodName         = "/com.gastroflow.restaurants.RestaurantService/SearchRestaurants"
	RestaurantService_UpdateRestaurantStatus_FullMethodName    = "/com.gastroflow.restaurants.RestaurantService/UpdateRestaurantStatus"
	RestaurantService_GetNearbyRestaurants_FullMethodName      = "/com.gastroflow.restaurants.RestaurantService/GetNearbyRestaurants"
	RestaurantService_CheckDeliveryAvailability_FullMethodName = "/com.gastroflow.restaurants.RestaurantService/CheckDeliveryAvailability"
)

// RestaurantServiceClient is the client API for RestaurantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RestaurantService - gRPC сервис для управления ресторанами
type RestaurantServiceClient interface {
	// Создать новый ресторан
	CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*CreateRestaurantResponse, error)
	// Получить ресторан по ID
	GetRestaurant(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error)
	// Обновить ресторан
	UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*UpdateRestaurantResponse, error)
	// Удалить ресторан (мягкое удаление)
	DeleteRestaurant(ctx context.Context, in *DeleteRestaurantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получить список ресторанов с фильтрацией
	ListRestaurants(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error)
	// Поиск ресторанов
	SearchRestaurants(ctx context.Context, in *SearchRestaurantsRequest, opts ...grpc.CallOption) (*SearchRestaurantsResponse, error)
	// Изменить статус ресторана
	UpdateRestaurantStatus(ctx context.Context, in *UpdateRestaurantStatusRequest, opts ...grpc.CallOption) (*UpdateRestaurantStatusResponse, error)
	// Получить рестораны рядом с координатами
	GetNearbyRestaurants(ctx context.Context, in *GetNearbyRestaurantsRequest, opts ...grpc.CallOption) (*GetNearbyRestaurantsResponse, error)
	// Проверить доставку по адресу
	CheckDeliveryAvailability(ctx context.Context, in *CheckDeliveryAvailabilityRequest, opts ...grpc.CallOption) (*CheckDeliveryAvailabilityResponse, error)
}

type restaurantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantServiceClient(cc grpc.ClientConnInterface) RestaurantServiceClient {
	return &restaurantServiceClient{cc}
}

func (c *restaurantServiceClient) CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*CreateRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_CreateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetRestaurant(ctx context.Context, in *GetRestaurantRequest, opts ...grpc.CallOption) (*GetRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*UpdateRestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRestaurantResponse)
	err := c.cc.Invoke(ctx, RestaurantService_UpdateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) DeleteRestaurant(ctx context.Context, in *DeleteRestaurantRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RestaurantService_DeleteRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) ListRestaurants(ctx context.Context, in *ListRestaurantsRequest, opts ...grpc.CallOption) (*ListRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRestaurantsResponse)
	err := c.cc.Invoke(ctx, RestaurantService_ListRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) SearchRestaurants(ctx context.Context, in *SearchRestaurantsRequest, opts ...grpc.CallOption) (*SearchRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRestaurantsResponse)
	err := c.cc.Invoke(ctx, RestaurantService_SearchRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) UpdateRestaurantStatus(ctx context.Context, in *UpdateRestaurantStatusRequest, opts ...grpc.CallOption) (*UpdateRestaurantStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRestaurantStatusResponse)
	err := c.cc.Invoke(ctx, RestaurantService_UpdateRestaurantStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) GetNearbyRestaurants(ctx context.Context, in *GetNearbyRestaurantsRequest, opts ...grpc.CallOption) (*GetNearbyRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyRestaurantsResponse)
	err := c.cc.Invoke(ctx, RestaurantService_GetNearbyRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantServiceClient) CheckDeliveryAvailability(ctx context.Context, in *CheckDeliveryAvailabilityRequest, opts ...grpc.CallOption) (*CheckDeliveryAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDeliveryAvailabilityResponse)
	err := c.cc.Invoke(ctx, RestaurantService_CheckDeliveryAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServiceServer is the server API for RestaurantService service.
// All implementations should embed UnimplementedRestaurantServiceServer
// for forward compatibility.
//
// RestaurantService - gRPC сервис для управления ресторанами
type RestaurantServiceServer interface {
	// Создать новый ресторан
	CreateRestaurant(context.Context, *CreateRestaurantRequest) (*CreateRestaurantResponse, error)
	// Получить ресторан по ID
	GetRestaurant(context.Context, *GetRestaurantRequest) (*GetRestaurantResponse, error)
	// Обновить ресторан
	UpdateRestaurant(context.Context, *UpdateRestaurantRequest) (*UpdateRestaurantResponse, error)
	// Удалить ресторан (мягкое удаление)
	DeleteRestaurant(context.Context, *DeleteRestaurantRequest) (*emptypb.Empty, error)
	// Получить список ресторанов с фильтрацией
	ListRestaurants(context.Context, *ListRestaurantsRequest) (*ListRestaurantsResponse, error)
	// Поиск ресторанов
	SearchRestaurants(context.Context, *SearchRestaurantsRequest) (*SearchRestaurantsResponse, error)
	// Изменить статус ресторана
	UpdateRestaurantStatus(context.Context, *UpdateRestaurantStatusRequest) (*UpdateRestaurantStatusResponse, error)
	// Получить рестораны рядом с координатами
	GetNearbyRestaurants(context.Context, *GetNearbyRestaurantsRequest) (*GetNearbyRestaurantsResponse, error)
	// Проверить доставку по адресу
	CheckDeliveryAvailability(context.Context, *CheckDeliveryAvailabilityRequest) (*CheckDeliveryAvailabilityResponse, error)
}

// UnimplementedRestaurantServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantServiceServer struct{}

func (UnimplementedRestaurantServiceServer) CreateRestaurant(context.Context, *CreateRestaurantRequest) (*CreateRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) GetRestaurant(context.Context, *GetRestaurantRequest) (*GetRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) UpdateRestaurant(context.Context, *UpdateRestaurantRequest) (*UpdateRestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) DeleteRestaurant(context.Context, *DeleteRestaurantRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestaurant not implemented")
}
func (UnimplementedRestaurantServiceServer) ListRestaurants(context.Context, *ListRestaurantsRequest) (*ListRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRestaurants not implemented")
}
func (UnimplementedRestaurantServiceServer) SearchRestaurants(context.Context, *SearchRestaurantsRequest) (*SearchRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRestaurants not implemented")
}
func (UnimplementedRestaurantServiceServer) UpdateRestaurantStatus(context.Context, *UpdateRestaurantStatusRequest) (*UpdateRestaurantStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurantStatus not implemented")
}
func (UnimplementedRestaurantServiceServer) GetNearbyRestaurants(context.Context, *GetNearbyRestaurantsRequest) (*GetNearbyRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyRestaurants not implemented")
}
func (UnimplementedRestaurantServiceServer) CheckDeliveryAvailability(context.Context, *CheckDeliveryAvailabilityRequest) (*CheckDeliveryAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeliveryAvailability not implemented")
}
func (UnimplementedRestaurantServiceServer) testEmbeddedByValue() {}

// UnsafeRestaurantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServiceServer will
// result in compilation errors.
type UnsafeRestaurantServiceServer interface {
	mustEmbedUnimplementedRestaurantServiceServer()
}

func RegisterRestaurantServiceServer(s grpc.ServiceRegistrar, srv RestaurantServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurantService_ServiceDesc, srv)
}

func _RestaurantService_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_CreateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).CreateRestaurant(ctx, req.(*CreateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetRestaurant(ctx, req.(*GetRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_UpdateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).UpdateRestaurant(ctx, req.(*UpdateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_DeleteRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).DeleteRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_DeleteRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).DeleteRestaurant(ctx, req.(*DeleteRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_ListRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).ListRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_ListRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).ListRestaurants(ctx, req.(*ListRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_SearchRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).SearchRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_SearchRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).SearchRestaurants(ctx, req.(*SearchRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_UpdateRestaurantStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).UpdateRestaurantStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_UpdateRestaurantStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).UpdateRestaurantStatus(ctx, req.(*UpdateRestaurantStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_GetNearbyRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).GetNearbyRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_GetNearbyRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).GetNearbyRestaurants(ctx, req.(*GetNearbyRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantService_CheckDeliveryAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeliveryAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServiceServer).CheckDeliveryAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantService_CheckDeliveryAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServiceServer).CheckDeliveryAvailability(ctx, req.(*CheckDeliveryAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantService_ServiceDesc is the grpc.ServiceDesc for RestaurantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.gastroflow.restaurants.RestaurantService",
	HandlerType: (*RestaurantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _RestaurantService_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetRestaurant",
			Handler:    _RestaurantService_GetRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _RestaurantService_UpdateRestaurant_Handler,
		},
		{
			MethodName: "DeleteRestaurant",
			Handler:    _RestaurantService_DeleteRestaurant_Handler,
		},
		{
			MethodName: "ListRestaurants",
			Handler:    _RestaurantService_ListRestaurants_Handler,
		},
		{
			MethodName: "SearchRestaurants",
			Handler:    _RestaurantService_SearchRestaurants_Handler,
		},
		{
			MethodName: "UpdateRestaurantStatus",
			Handler:    _RestaurantService_UpdateRestaurantStatus_Handler,
		},
		{
			MethodName: "GetNearbyRestaurants",
			Handler:    _RestaurantService_GetNearbyRestaurants_Handler,
		},
		{
			MethodName: "CheckDeliveryAvailability",
			Handler:    _RestaurantService_CheckDeliveryAvailability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/gastroflow/restaurants/service.proto",
}

const (
	BranchService_CreateBranch_FullMethodName       = "/com.gastroflow.restaurants.BranchService/CreateBranch"
	BranchService_GetBranch_FullMethodName          = "/com.gastroflow.restaurants.BranchService/GetBranch"
	BranchService_UpdateBranch_FullMethodName       = "/com.gastroflow.restaurants.BranchService/UpdateBranch"
	BranchService_DeleteBranch_FullMethodName       = "/com.gastroflow.restaurants.BranchService/DeleteBranch"
	BranchService_ListBranches_FullMethodName       = "/com.gastroflow.restaurants.BranchService/ListBranches"
	BranchService_UpdateBranchStatus_FullMethodName = "/com.gastroflow.restaurants.BranchService/UpdateBranchStatus"
)

// BranchServiceClient is the client API for BranchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BranchService - gRPC сервис для управления филиалами
type BranchServiceClient interface {
	// Создать новый филиал
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	// Получить филиал по ID
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error)
	// Обновить филиал
	UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error)
	// Удалить филиал (мягкое удаление)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Получить список филиалов ресторана
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	// Изменить статус филиала
	UpdateBranchStatus(ctx context.Context, in *UpdateBranchStatusRequest, opts ...grpc.CallOption) (*UpdateBranchStatusResponse, error)
}

type branchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchServiceClient(cc grpc.ClientConnInterface) BranchServiceClient {
	return &branchServiceClient{cc}
}

func (c *branchServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, BranchService_CreateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBranchResponse)
	err := c.cc.Invoke(ctx, BranchService_GetBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) UpdateBranch(ctx context.Context, in *UpdateBranchRequest, opts ...grpc.CallOption) (*UpdateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchResponse)
	err := c.cc.Invoke(ctx, BranchService_UpdateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BranchService_DeleteBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, BranchService_ListBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchServiceClient) UpdateBranchStatus(ctx context.Context, in *UpdateBranchStatusRequest, opts ...grpc.CallOption) (*UpdateBranchStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBranchStatusResponse)
	err := c.cc.Invoke(ctx, BranchService_UpdateBranchStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchServiceServer is the server API for BranchService service.
// All implementations should embed UnimplementedBranchServiceServer
// for forward compatibility.
//
// BranchService - gRPC сервис для управления филиалами
type BranchServiceServer interface {
	// Создать новый филиал
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	// Получить филиал по ID
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error)
	// Обновить филиал
	UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error)
	// Удалить филиал (мягкое удаление)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error)
	// Получить список филиалов ресторана
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	// Изменить статус филиала
	UpdateBranchStatus(context.Context, *UpdateBranchStatusRequest) (*UpdateBranchStatusResponse, error)
}

// UnimplementedBranchServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBranchServiceServer struct{}

func (UnimplementedBranchServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedBranchServiceServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedBranchServiceServer) UpdateBranch(context.Context, *UpdateBranchRequest) (*UpdateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranch not implemented")
}
func (UnimplementedBranchServiceServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedBranchServiceServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedBranchServiceServer) UpdateBranchStatus(context.Context, *UpdateBranchStatusRequest) (*UpdateBranchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchStatus not implemented")
}
func (UnimplementedBranchServiceServer) testEmbeddedByValue() {}

// UnsafeBranchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchServiceServer will
// result in compilation errors.
type UnsafeBranchServiceServer interface {
	mustEmbedUnimplementedBranchServiceServer()
}

func RegisterBranchServiceServer(s grpc.ServiceRegistrar, srv BranchServiceServer) {
	// If the following call pancis, it indicates UnimplementedBranchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BranchService_ServiceDesc, srv)
}

func _BranchService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_GetBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_UpdateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).UpdateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_UpdateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).UpdateBranch(ctx, req.(*UpdateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_DeleteBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BranchService_UpdateBranchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServiceServer).UpdateBranchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BranchService_UpdateBranchStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServiceServer).UpdateBranchStatus(ctx, req.(*UpdateBranchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BranchService_ServiceDesc is the grpc.ServiceDesc for BranchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BranchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.gastroflow.restaurants.BranchService",
	HandlerType: (*BranchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBranch",
			Handler:    _BranchService_CreateBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _BranchService_GetBranch_Handler,
		},
		{
			MethodName: "UpdateBranch",
			Handler:    _BranchService_UpdateBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _BranchService_DeleteBranch_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _BranchService_ListBranches_Handler,
		},
		{
			MethodName: "UpdateBranchStatus",
			Handler:    _BranchService_UpdateBranchStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/gastroflow/restaurants/service.proto",
}

const (
	RestaurantSettingsService_GetSettings_FullMethodName        = "/com.gastroflow.restaurants.RestaurantSettingsService/GetSettings"
	RestaurantSettingsService_UpdateSettings_FullMethodName     = "/com.gastroflow.restaurants.RestaurantSettingsService/UpdateSettings"
	RestaurantSettingsService_GetWorkingHours_FullMethodName    = "/com.gastroflow.restaurants.RestaurantSettingsService/GetWorkingHours"
	RestaurantSettingsService_UpdateWorkingHours_FullMethodName = "/com.gastroflow.restaurants.RestaurantSettingsService/UpdateWorkingHours"
	RestaurantSettingsService_UpdateDeliveryZone_FullMethodName = "/com.gastroflow.restaurants.RestaurantSettingsService/UpdateDeliveryZone"
)

// RestaurantSettingsServiceClient is the client API for RestaurantSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RestaurantSettingsService - gRPC сервис для управления настройками
type RestaurantSettingsServiceClient interface {
	// Получить настройки ресторана
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	// Обновить настройки ресторана
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error)
	// Получить график работы
	GetWorkingHours(ctx context.Context, in *GetWorkingHoursRequest, opts ...grpc.CallOption) (*GetWorkingHoursResponse, error)
	// Обновить график работы
	UpdateWorkingHours(ctx context.Context, in *UpdateWorkingHoursRequest, opts ...grpc.CallOption) (*UpdateWorkingHoursResponse, error)
	// Обновить зону доставки
	UpdateDeliveryZone(ctx context.Context, in *UpdateDeliveryZoneRequest, opts ...grpc.CallOption) (*UpdateDeliveryZoneResponse, error)
}

type restaurantSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantSettingsServiceClient(cc grpc.ClientConnInterface) RestaurantSettingsServiceClient {
	return &restaurantSettingsServiceClient{cc}
}

func (c *restaurantSettingsServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, RestaurantSettingsService_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantSettingsServiceClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*UpdateSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSettingsResponse)
	err := c.cc.Invoke(ctx, RestaurantSettingsService_UpdateSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantSettingsServiceClient) GetWorkingHours(ctx context.Context, in *GetWorkingHoursRequest, opts ...grpc.CallOption) (*GetWorkingHoursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkingHoursResponse)
	err := c.cc.Invoke(ctx, RestaurantSettingsService_GetWorkingHours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantSettingsServiceClient) UpdateWorkingHours(ctx context.Context, in *UpdateWorkingHoursRequest, opts ...grpc.CallOption) (*UpdateWorkingHoursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkingHoursResponse)
	err := c.cc.Invoke(ctx, RestaurantSettingsService_UpdateWorkingHours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantSettingsServiceClient) UpdateDeliveryZone(ctx context.Context, in *UpdateDeliveryZoneRequest, opts ...grpc.CallOption) (*UpdateDeliveryZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeliveryZoneResponse)
	err := c.cc.Invoke(ctx, RestaurantSettingsService_UpdateDeliveryZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantSettingsServiceServer is the server API for RestaurantSettingsService service.
// All implementations should embed UnimplementedRestaurantSettingsServiceServer
// for forward compatibility.
//
// RestaurantSettingsService - gRPC сервис для управления настройками
type RestaurantSettingsServiceServer interface {
	// Получить настройки ресторана
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	// Обновить настройки ресторана
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error)
	// Получить график работы
	GetWorkingHours(context.Context, *GetWorkingHoursRequest) (*GetWorkingHoursResponse, error)
	// Обновить график работы
	UpdateWorkingHours(context.Context, *UpdateWorkingHoursRequest) (*UpdateWorkingHoursResponse, error)
	// Обновить зону доставки
	UpdateDeliveryZone(context.Context, *UpdateDeliveryZoneRequest) (*UpdateDeliveryZoneResponse, error)
}

// UnimplementedRestaurantSettingsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestaurantSettingsServiceServer struct{}

func (UnimplementedRestaurantSettingsServiceServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedRestaurantSettingsServiceServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedRestaurantSettingsServiceServer) GetWorkingHours(context.Context, *GetWorkingHoursRequest) (*GetWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkingHours not implemented")
}
func (UnimplementedRestaurantSettingsServiceServer) UpdateWorkingHours(context.Context, *UpdateWorkingHoursRequest) (*UpdateWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkingHours not implemented")
}
func (UnimplementedRestaurantSettingsServiceServer) UpdateDeliveryZone(context.Context, *UpdateDeliveryZoneRequest) (*UpdateDeliveryZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeliveryZone not implemented")
}
func (UnimplementedRestaurantSettingsServiceServer) testEmbeddedByValue() {}

// UnsafeRestaurantSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantSettingsServiceServer will
// result in compilation errors.
type UnsafeRestaurantSettingsServiceServer interface {
	mustEmbedUnimplementedRestaurantSettingsServiceServer()
}

func RegisterRestaurantSettingsServiceServer(s grpc.ServiceRegistrar, srv RestaurantSettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestaurantSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestaurantSettingsService_ServiceDesc, srv)
}

func _RestaurantSettingsService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantSettingsServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantSettingsService_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantSettingsServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantSettingsService_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantSettingsServiceServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantSettingsService_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantSettingsServiceServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantSettingsService_GetWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantSettingsServiceServer).GetWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantSettingsService_GetWorkingHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantSettingsServiceServer).GetWorkingHours(ctx, req.(*GetWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantSettingsService_UpdateWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantSettingsServiceServer).UpdateWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantSettingsService_UpdateWorkingHours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantSettingsServiceServer).UpdateWorkingHours(ctx, req.(*UpdateWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestaurantSettingsService_UpdateDeliveryZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeliveryZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantSettingsServiceServer).UpdateDeliveryZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestaurantSettingsService_UpdateDeliveryZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantSettingsServiceServer).UpdateDeliveryZone(ctx, req.(*UpdateDeliveryZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RestaurantSettingsService_ServiceDesc is the grpc.ServiceDesc for RestaurantSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestaurantSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.gastroflow.restaurants.RestaurantSettingsService",
	HandlerType: (*RestaurantSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _RestaurantSettingsService_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _RestaurantSettingsService_UpdateSettings_Handler,
		},
		{
			MethodName: "GetWorkingHours",
			Handler:    _RestaurantSettingsService_GetWorkingHours_Handler,
		},
		{
			MethodName: "UpdateWorkingHours",
			Handler:    _RestaurantSettingsService_UpdateWorkingHours_Handler,
		},
		{
			MethodName: "UpdateDeliveryZone",
			Handler:    _RestaurantSettingsService_UpdateDeliveryZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/gastroflow/restaurants/service.proto",
}
